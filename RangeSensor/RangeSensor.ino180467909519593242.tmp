
#include <SPI.h>
#include <Ethernet2.h>
#include <EEPROM.h>
#include "sensorData.h"
#include "Arduino.h"

//---------------------Variable Declaration-------------------------------

//Assigning the sensor analog entry to pin A0
int sensorPin = A0;

//Assigning the red LED to pin 8
int redLED = 8; 

//Contain the temporary readings that will be taken every time void loop() runs
double tempReading, tempReading2; 

//SensorData object that will store the range reading as a private data member
sensorData datareading; 
//-------------------------------------------------------------------------

//--------------------------Ethernet Settings------------------------------

//Mac Adress from ethernet shield
byte mac[] = {0x90, 0xA2, 0xDA, 0x10, 0xC9, 0x4A};
//IP adress of the server
IPAddress ip(192,168,2,68) ;
/*IPAddress gateway(192, 168, 2, 1);
IPAddress subnet(255, 255, 0, 0);
*/

//Server ip adress
//IPAdress server(74, 125, 232, 128); 


// Initialize the Ethernet client
EthernetClient client;

void setup() {
  // Open serial communications and wait for port to open:
  Serial.begin(9600);
  pinMode(redLED, OUTPUT);
  
  // start the Ethernet connection:
  if (Ethernet.begin(mac) == 0) {
    Serial.println("Failed to configure Ethernet using DHCP");
    // no point in carrying on, so do nothing forevermore:
    for (;;)
      ;
  }
  // print your local IP address:
  Serial.print("My IP address: ");
  for (byte thisByte = 0; thisByte < 4; thisByte++) {
    // print the value of each byte of the IP address:
    Serial.print(Ethernet.localIP()[thisByte], DEC);
    Serial.print(".");
  }
  Serial.println();
}

// Void loop contains the code that will be runned reapeatidly.
void loop() { 
  
//  digitalWrite(redLED, HIGH);
 // datareading.setsensorData(sensorPin);
 // tempReading = datareading.getRange();
  //Serial.println(tempReading); //Serial monitoring of the range
 // if (client == true)   //Check for connection
 // {
 //  digitalWrite(redLED, HIGH); //Opening the red LED if the client is connected
 // }
  
  //INSERT DETECTION ALGORITHM HERE
  //if(tempReading < 800.00) //Temporary algorithm
  //{
   // Make a HTTP request:
    
    //SENDING DATA TO THE SERVER
    //if(client.connected()){ //DATA SENT TO SERVER
    // Make a HTTP request:
    //client.print( "GET /add_data.php?");
    //client.print("serial=");
    //client.print( "RangeSensor" );
    //client.print("&&");
    //client.print("entry=");
    //client.print( "1");
    //client.print("&&");
    //client.print("time=");
    //client.print(entry_time);
    //client.println( " HTTP/1.1");
    //client.println( "Host: 192.168.2.9" );
    //client.println(server);
    //client.println( "Connection: close" );
    //client.println();
    //client.println();
    //client.stop();
    //}
  //}
  digitalWrite(redLED, HIGH);
  delay (100);
  digitalWrite(redLED, LOW);
}

void sendToDatabase (){
  client.connect ("www.test.com", 80) ;  //Address of the mySQL database
  if (client.connected) { //client.connected returns boolean true of false
    client.print( "GET /testserver/facility/add_data.php?"); //Enter name of real server
    client.print("entry=");
    client.print( "1" );
    client.print("&&");
    client.print("month=");
    client.print( "7" );
    client.print("&&");
    client.print("day=");
    client.print( "11" );
    client.print("&&");
    client.print("hours=");
    client.print( "13" );
    client.print("&&");
    client.print("minutes=")
    client.print( "58" );
    client.println( " HTTP/1.1");
    client.print( "Host: test.com" );
    client.println(server)
    client.println( "Connection: close" );
    client.println();
    client.println();
    client.stop();

}
}

